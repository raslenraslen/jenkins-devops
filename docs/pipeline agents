pipeline {
    agent any
    
    tools {
        maven 'Maven3'
        jdk 'JDK'
    }
      environment {
        
        SONAR_HOME = tool 'sonar-scanner'
    }
    stages {
         stage('Git checkout') {
              
            steps {
                git branch: 'main', url: 'https://github.com/raslenraslen/application-pipeline.git'
                stash 'source'
            }
        }
        
       

        stage('Maven Test') {
            agent { label 'agent1' }
            steps {
                unstash 'source'
                echo "Compilation et tests sur Agent 1..."
                sh 'mvn test'
            }
        }
        stage('Maven compile') {
            agent { label 'agent1' }
            steps {
                unstash 'source'
                echo "Compilation et tests sur Agent 1..."
                sh 'mvn compile'
            }
        }
         stage('Maven package') {
            agent { label 'agent1' }
            steps {
                unstash 'source'
                echo "Compilation et tests sur Agent 1..."
                sh 'mvn clean package'
            }
        } 
        

       
          stage('Trivy FS scan') {
               agent { label 'agent1' }
            steps {
                unstash 'source'
            sh " trivy fs --format table -o fs.html ."
                archiveArtifacts artifacts: 'fs.html', fingerprint: true
            }
       }  
 stage('Publish to Nexus') {
      agent { label 'agent2' }
            steps {
                 unstash 'source'
                configFileProvider([configFile(fileId: '03a89963-da1f-4b3b-b67b-d5235e8cf679', variable: 'mavensettings')]) {
                    
                    sh 'mvn -s "$mavensettings" clean deploy'
                }
            }
        } 
         stage('Terraform stage') {
            agent { label 'agent2' }
            steps {
                unstash 'source'
                echo "Compilation et tests sur Agent 1..."
                sh 'mvn clean package'
            }
        }  
        
            stage('OWASP Dependency Check') {
                agent { label 'agent1' }
            steps {
                unstash 'source'
                dependencyCheck additionalArguments: '--scan target/', odcInstallation: 'OWASP'
            }
        }
   
        stage('Publish OWASP Dependency Check Report') {
            agent { label 'agent1' }
            steps {
                publishHTML(target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'target',
                    reportFiles: 'dependency-check-report.html',
                    reportName: 'OWASP Dependency Check Report'
                ])
            }
        }
        
           stage('Sonarqube Analysis') {
    agent { label 'agent1' }
    steps {
        unstash 'source'
        withSonarQubeEnv('sonar-server') {
            sh ''' 
                $SONAR_HOME/bin/sonar-scanner -Dsonar.projectName=Raslen -Dsonar.projectKey=Raslen \
                -Dsonar.java.binaries=target
            '''
        }
    }
    
} 

   stage('Build & Tag Docker Imagee') {
               agent { label 'agent2' }
            steps {
                 unstash 'source'
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker build -t raslenmissaoui061/raslenshackk:latest ."
                    }
                }
            }
        }
          stage('Push Docker Image') {
              agent { label 'agent2' }
            steps {
                unstash 'source'
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker push raslenmissaoui061/raslenshackk:latest "
                    }
                }
            }
        }
         stage('Docker Image Scan') {
    agent { label 'agent2' }
    steps {
        unstash 'source'
        
        sh '''
            trivy image \
            --timeout 10m \
            --format json \
            -o trivy-report.json \
            raslenmissaoui061/raslenshackk:latest
        '''
        
    }
}
       
    }
     post {
        always {
            script {
                def jobName = env.JOB_NAME
                def buildNumber = env.BUILD_NUMBER
                def pipelineStatus = currentBuild.result ?: 'SUCCESS'
                def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'

                def body = """
                    <html>
                        <body>
                            <div style=\"border: 4px solid ${bannerColor}; padding: 10px;\">
                                <h2>${jobName} - Build ${buildNumber}</h2>
                                <div style=\"background-color: ${bannerColor}; padding: 10px;\">
                                    <h3 style=\"color: white;\">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                                </div>
                                <p>Check the <a href=\"${BUILD_URL}\">console output</a>.</p>
                            </div>
                        </body>
                    </html>
                """

                emailext(
                    subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                    body: body,
                    to: 'raslenm39@gmail.com',
                    from: 'raslenm39@gmail.com',
                    replyTo: 'raslenm39@gmail.com',
                    mimeType: 'text/html'
                )
            }
        }
    }
}

